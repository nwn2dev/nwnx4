
#
# Log verbosity
# Messages from higher levels are always written. E.g. setting to 'info' will
# also write 'error' and 'warning' messages.
# Possible values: none, error, warning, info, debug, trace
#
# default: info
#

log_level = info

#
# Log file maximum size, before it is automatically rotated
# Numbers can end with G M K for gigabytes, megabytes or kilobytes
# 0 disables the log rotation
#
# default: 0
#

log_max_file_size = 0

#
# Buffer log writes.
# This improves the performance of the logger, but you may lose some log lines
# if the server crashes.
# false = lines are flushed on every write
# true  = lines are kept in memory and flushed when needed
#
# default: false
#

log_buffered = false

#
# Swap out the server's NetLayer implementation (fix transition crash/hangs).
#
# Requires that AuroraServerNetLayer.dll be present in the game's installation
# directory.
#
# The plugin default is 1.
#

ReplaceNetLayer = 1

#
# Rewrite client UDP port in received packets, to resolve issues with multiple
# players behind the same NAT.
#
# The plugin default is 1
#

RewriteClientUdpPort = 1

#
# For debugging, compression can be turned off on the server.  This is only
# effective if ReplaceNetLayer is set to 0.  Generally, this option should
# not be used.
#
# The plugin default is 0.
#

# DisableServerCompression = 0

#
# The GameObjUpdate burst size, or the maximum amount of data that can be sent
# as a burst transmission during an area load, can be set here.  The default
# value is 102400 (100KB), which should generally be kept.
#

# GameObjUpdateBurstSize = 102400

#
# The server timer can be configured to use GetTickCount, which may be useful
# on some hardware or virtualization platforms that do not provide an rdtsc
# implementation that is stable or synchronized across cores.  Otherwise, the
# option should not be set (which is the default).
#
# The plugin default is 0.
#

# UseGetTickCount = 0

#
# The GameObjUpdateTime, or interval at which the game state is re-synchronized
# to clients, can be configured here.  Increasing this value can significantly
# lower CPU utilization on the server, but can contribute to greater perceived
# latency for players, as clients are told of world updates less often.
#
# The default value, which is also the server's built-in default, is
# 200000 microseconds.  Values up to 400000 are often tolerable without too
# much perceived impact to players.  Values over 1000000 often significantly
# noticeable to players.
#
# It is recommended that ReplaceNetLayer = 1 be used for this option, or area
# load times for players may be greatly impacted.
#

# GameObjUpdateTime = 200000

#
# The number of internal buffers used by the campaign database can be changed
# here.  Each buffer utilizes 32K of memory.  The server default scales based
# on available memory, but can be inordinately large on machines with 4GB of
# memory, up to 700MB.  The plugin default is 1024 buffers, for a maximum of
# 32MB of memory used by the campaign database.
#

# DatabaseBufferCount = 1024

#
# In builds compiled with XP_BUGFIX_USE_SYMBOLS, stack traces can be logged to
# this file.  This is a developer feature and should not be turned on unless
# explicit instructions to the contrary have been given.
#

# StackTraceLogFile = C:\NWN2\NWNX4\StackTrace.log

#
# The number of traces stored in the log file can be configured here.  This
# option is only used if the StackTraceLogFile option is set.
#

# StackTraceCount = 1048576

#
# Throttle AIUpdate processing for lower priority objects after this amount of
# milliseconds, if zero throttling is not performed.  Defaults to 0.
#

AIUpdateThrottle = 32

#
# Post fake WSAAsyncSelect completion window messages each main loop iteration
# if this is nonzero.  Defaults to 0.  DirectPollNetRecv is recommended instead
# of this option.
#

OverrideNetRecv = 0

#
# Directly poll for up to 50 packets each main loop iteration, used to fix
# issues where the server doesn't read from the network in a timely fashion
# when load is high.
#
# This is recommended over OverrideNetRecv, if both are set, OverrideNetRecv
# takes priority.  Better responsiveness will be observed with this option in
# most cases.
#

DirectPollNetRecv = 1


#
# Enable TLS.  Requires .NET Framework 4.7.2 or better on the server,
# which can be downloaded here:
#
# https://support.microsoft.com/en-us/help/4054530/microsoft-net-framework-4-7-2-offline-installer-for-windows
#
# This feature requires ReplaceNetLayer = 1 to be set to work.
#
# This feature is on by default.  If .NET Framework 4.7.2 or better is
# not installed then the feature will be disabled.
#
# Host keys require .NET Framework 4.7.2 to be automatically generated.  If a
# system has .NET Framework 4.7.0 and host keys are copied from another server,
# TLS will still work.
#
# A host key is automatically created in the NWNX4 installation
# directory, in the form of NWNCertificate.cer (public key) and
# NWNCertificate.pfx (public key + private key).  It is recommended
# to back these files up and use the same NWNCertificate.pfx for
# all server instances hosting the same module as clients associate
# TLS host keys with module resource names when strict TLS is
# enabled.  That is, all servers using the same autodownloader client side
# module directory should use use the same host key combination.
#
# TLS requires Client Extension 1.0.0.29 or better client-side.  Clients
# without the necessary support still work, just without TLS.
#
# Default is 1.
#

EnableTls = 1

#
# Enables large window size extensions, which require TLS support to be
# effective.  This may improve performance for players on high latency
# connections.
#
# Default is 0.
#

WindowExtensions = 1

#
# Changes the precision of facing (heading) updates for creature objects as
# sent to players.  This reduces situations where the client and server get
# out of sync about where the player's character is facing after WASD style
# movement.
#
# The stock server default is 0.95.  The xp_bugfix default is 0.999.  Higher
# values cause more fine grained facing updates to be sent to clients.
#

FacingPrecision = 0.999

#
# Changes the AABB (bounding box) count allocated at startup for each area.
# If set to 0, the server default of 2000 is used.  This is more than most
# areas need and consumes a few MB of memory per area.  The xp_bugfix default
# if this value is not set is 100.
#
# The server grows the AABB count by 200 each time the count was too small to
# hold a new collision bounding box for an object added to the area.
#

InitialAreaAABBCount = 100

#
# Change the default attachment point allocation for game objects.  The
# stock server default is 16, which is too many for objects that do not have
# any typical need for attachments, i.e. placed effects or environmental
# objects.  Furthermore, only client applications appear to use anything
# beyond the base attachment point, so it appears safe to set this value to
# 1, which will reduce the memory overhead of each game object.  The xp_bugfix
# default if this value is not set is 1.
#

InitialAttachmentPointCount = 1

#
# Prevents all players to create new characters
#
# The plugin default is 0
#

DisableCharacterCreation = 0

#
# Skip the AuroraServerCreateCertificate query
#
# The plugin default is 0
#

SkipAuroraServerCreateCertificate = 0